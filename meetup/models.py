from uuid import uuid4

from django.contrib.auth import get_user_model
from django.db import models

User = get_user_model()


class Venue(models.Model):
    """This model is for the venue where be held"""
    name = models.CharField(max_length=50)
    location = models.CharField(max_length=255, null=True)
    description = models.TextField(null=True)
    latitude = models.DecimalField(max_digits=9, decimal_places=6)
    longitude = models.DecimalField(max_digits=9, decimal_places=6)


class ProgramCategory(models.Model):
    """This model is for the category of program"""
    name = models.CharField(max_length=100)
    slug = models.SlugField(max_length=100, unique=True)


class Speaker(models.Model):
    """This model is for that user related by speaker at program"""
    user = models.ForeignKey(User)


class Program(models.Model):
    """This model is for that lecture or event by speaker(s)"""
    # There should be difficulty and language information in Program?
    title = models.CharField(max_length=255)
    brief = models.TextField(null=True, verbose_name='simple information')
    description = models.TextField(null=True)
    speakers = models.ManyToManyField(Speaker, null=True)
    category = models.ForeignKey(ProgramCategory, null=True, verbose_name='The category which this program is belonged')
    slide_url = models.URLField(null=True, verbose_name='A slide url')
    pdf_url = models.URLField(null=True, verbose_name='A pdf url')
    video_url = models.URLField(null=True, verbose_name='A video url')
    is_recordable = models.BooleanField(default=True, verbose_name='recordable condition')

    # If kind of session or lecture True, or not False (include breaktime)
    is_main_event = models.BooleanField(default=True)


class Profile(models.Model):
    """This model is for which profile for user"""
    user = models.OneToOneField(User)
    name = models.CharField(max_length=50)
    slug = models.SlugField(max_length=50, unique=True, verbose_name='username')
    organization = models.CharField(max_length=100, null=True)
    image = models.ImageField(upload_to='profile', null=True)
    biography = models.TextField(max_length=4000, null=True)


class EmailToken(models.Model):
    """This model is for token when someone sign in this website by email"""
    email = models.EmailField(max_length=255, verbose_name='The email was used to sign in')
    token = models.UUIDField(default=uuid4, editable=False,
                             verbose_name='The token was generated by uuid')
    created_at = models.DateTimeField(auto_now_add=True)
